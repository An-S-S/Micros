
Laboratorio_05_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000946  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b3  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d4  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000183c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044d  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000061  00000000  00000000  00001d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Init>:
}

/****************************************/
// NON-Interrupt subroutines
void ADC_Init() {
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  80:	87 e8       	ldi	r24, 0x87	; 135
  82:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADMUX = (1 << REFS0);
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  8c:	08 95       	ret

0000008e <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	ADMUX = (1 << REFS0) | (channel & 0x07);
  8e:	87 70       	andi	r24, 0x07	; 7
  90:	80 64       	ori	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= (1 << ADSC);
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a4:	86 fd       	sbrc	r24, 6
  a6:	fc cf       	rjmp	.-8      	; 0xa0 <ADC_Read+0x12>
	return ADC;
  a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  b0:	08 95       	ret

000000b2 <main>:
void ADC_Init();
uint16_t ADC_Read(uint8_t channel);
/****************************************/
// Main Function
int main() {
	PWM_Init();
  b2:	0e 94 ae 00 	call	0x15c	; 0x15c <PWM_Init>
	ADC_Init();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Init>
	
	// Configurar Timer2 para LED en PB3
	DDRB |= (1 << DDB3);
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	84 b9       	out	0x04, r24	; 4
	TCCR2A = (1 << COM2A1) | (1 << WGM21) | (1 << WGM20);
  c0:	83 e8       	ldi	r24, 0x83	; 131
  c2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	while(1) {
		uint16_t pot1 = ADC_Read(3);  // PC3
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
  d2:	8c 01       	movw	r16, r24
		uint16_t pot2 = ADC_Read(4);  // PC4
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
  da:	ec 01       	movw	r28, r24
		uint16_t pot3 = ADC_Read(5);  // PC5
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
  e2:	5c 01       	movw	r10, r24
		
		// Mapear valores a rangos de PWM
		uint16_t servo1 = 1999 + (pot1 * 2000L) / 1023;
  e4:	98 01       	movw	r18, r16
  e6:	a0 ed       	ldi	r26, 0xD0	; 208
  e8:	b7 e0       	ldi	r27, 0x07	; 7
  ea:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__umulhisi3>
  ee:	0f 2e       	mov	r0, r31
  f0:	cc 24       	eor	r12, r12
  f2:	ca 94       	dec	r12
  f4:	f3 e0       	ldi	r31, 0x03	; 3
  f6:	df 2e       	mov	r13, r31
  f8:	e1 2c       	mov	r14, r1
  fa:	f1 2c       	mov	r15, r1
  fc:	f0 2d       	mov	r31, r0
  fe:	a7 01       	movw	r20, r14
 100:	96 01       	movw	r18, r12
 102:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__divmodsi4>
 106:	89 01       	movw	r16, r18
 108:	01 53       	subi	r16, 0x31	; 49
 10a:	18 4f       	sbci	r17, 0xF8	; 248
		uint16_t servo2 = 1999 + (pot2 * 2000L) / 1023;
 10c:	9e 01       	movw	r18, r28
 10e:	a0 ed       	ldi	r26, 0xD0	; 208
 110:	b7 e0       	ldi	r27, 0x07	; 7
 112:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__umulhisi3>
 116:	a7 01       	movw	r20, r14
 118:	96 01       	movw	r18, r12
 11a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__divmodsi4>
 11e:	e9 01       	movw	r28, r18
 120:	c1 53       	subi	r28, 0x31	; 49
 122:	d8 4f       	sbci	r29, 0xF8	; 248
		uint8_t led = (pot3 * 255L) / 1023;
 124:	95 01       	movw	r18, r10
 126:	af ef       	ldi	r26, 0xFF	; 255
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__umulhisi3>
 12e:	a7 01       	movw	r20, r14
 130:	96 01       	movw	r18, r12
 132:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <__divmodsi4>
 136:	f2 2e       	mov	r15, r18
		
		// Actualizar PWM
		PWM_SetServo1(servo1);
 138:	c8 01       	movw	r24, r16
 13a:	0e 94 c8 00 	call	0x190	; 0x190 <PWM_SetServo1>
		PWM_SetServo2(servo2);
 13e:	ce 01       	movw	r24, r28
 140:	0e 94 cd 00 	call	0x19a	; 0x19a <PWM_SetServo2>
		OCR2A = led;
 144:	f0 92 b3 00 	sts	0x00B3, r15	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	89 ef       	ldi	r24, 0xF9	; 249
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x9c>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xa6>
 158:	00 00       	nop
 15a:	b8 cf       	rjmp	.-144    	; 0xcc <main+0x1a>

0000015c <PWM_Init>:
 *  Author: André
 */ 
#include "pwm.h"

void PWM_Init() {
	DDRB |= (1 << DDB1) | (1 << DDB2);  // PB1 y PB2 como salidas
 15c:	84 b1       	in	r24, 0x04	; 4
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	84 b9       	out	0x04, r24	; 4
	
	// Configurar Timer1 para PWM fase correcta con ICR1 como TOP
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 162:	82 ea       	ldi	r24, 0xA2	; 162
 164:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11);  // Prescaler 8
 168:	82 e1       	ldi	r24, 0x12	; 18
 16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 39999;  // Periodo de 20ms (50Hz)
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	9c e9       	ldi	r25, 0x9C	; 156
 172:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 176:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	// Valores iniciales para posición neutral (1.5ms)
	OCR1A = 2999;
 17a:	87 eb       	ldi	r24, 0xB7	; 183
 17c:	9b e0       	ldi	r25, 0x0B	; 11
 17e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 2999;
 186:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 18a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 18e:	08 95       	ret

00000190 <PWM_SetServo1>:
}

void PWM_SetServo1(uint16_t pulseWidth) {
	OCR1A = pulseWidth;
 190:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 194:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 198:	08 95       	ret

0000019a <PWM_SetServo2>:
}

void PWM_SetServo2(uint16_t pulseWidth) {
	OCR1B = pulseWidth;
 19a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 19e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1a2:	08 95       	ret

000001a4 <__divmodsi4>:
 1a4:	05 2e       	mov	r0, r21
 1a6:	97 fb       	bst	r25, 7
 1a8:	1e f4       	brtc	.+6      	; 0x1b0 <__divmodsi4+0xc>
 1aa:	00 94       	com	r0
 1ac:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__negsi2>
 1b0:	57 fd       	sbrc	r21, 7
 1b2:	07 d0       	rcall	.+14     	; 0x1c2 <__divmodsi4_neg2>
 1b4:	0e 94 00 01 	call	0x200	; 0x200 <__udivmodsi4>
 1b8:	07 fc       	sbrc	r0, 7
 1ba:	03 d0       	rcall	.+6      	; 0x1c2 <__divmodsi4_neg2>
 1bc:	4e f4       	brtc	.+18     	; 0x1d0 <__divmodsi4_exit>
 1be:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__negsi2>

000001c2 <__divmodsi4_neg2>:
 1c2:	50 95       	com	r21
 1c4:	40 95       	com	r20
 1c6:	30 95       	com	r19
 1c8:	21 95       	neg	r18
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	4f 4f       	sbci	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255

000001d0 <__divmodsi4_exit>:
 1d0:	08 95       	ret

000001d2 <__negsi2>:
 1d2:	90 95       	com	r25
 1d4:	80 95       	com	r24
 1d6:	70 95       	com	r23
 1d8:	61 95       	neg	r22
 1da:	7f 4f       	sbci	r23, 0xFF	; 255
 1dc:	8f 4f       	sbci	r24, 0xFF	; 255
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	08 95       	ret

000001e2 <__umulhisi3>:
 1e2:	a2 9f       	mul	r26, r18
 1e4:	b0 01       	movw	r22, r0
 1e6:	b3 9f       	mul	r27, r19
 1e8:	c0 01       	movw	r24, r0
 1ea:	a3 9f       	mul	r26, r19
 1ec:	70 0d       	add	r23, r0
 1ee:	81 1d       	adc	r24, r1
 1f0:	11 24       	eor	r1, r1
 1f2:	91 1d       	adc	r25, r1
 1f4:	b2 9f       	mul	r27, r18
 1f6:	70 0d       	add	r23, r0
 1f8:	81 1d       	adc	r24, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	91 1d       	adc	r25, r1
 1fe:	08 95       	ret

00000200 <__udivmodsi4>:
 200:	a1 e2       	ldi	r26, 0x21	; 33
 202:	1a 2e       	mov	r1, r26
 204:	aa 1b       	sub	r26, r26
 206:	bb 1b       	sub	r27, r27
 208:	fd 01       	movw	r30, r26
 20a:	0d c0       	rjmp	.+26     	; 0x226 <__udivmodsi4_ep>

0000020c <__udivmodsi4_loop>:
 20c:	aa 1f       	adc	r26, r26
 20e:	bb 1f       	adc	r27, r27
 210:	ee 1f       	adc	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	a2 17       	cp	r26, r18
 216:	b3 07       	cpc	r27, r19
 218:	e4 07       	cpc	r30, r20
 21a:	f5 07       	cpc	r31, r21
 21c:	20 f0       	brcs	.+8      	; 0x226 <__udivmodsi4_ep>
 21e:	a2 1b       	sub	r26, r18
 220:	b3 0b       	sbc	r27, r19
 222:	e4 0b       	sbc	r30, r20
 224:	f5 0b       	sbc	r31, r21

00000226 <__udivmodsi4_ep>:
 226:	66 1f       	adc	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	88 1f       	adc	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	1a 94       	dec	r1
 230:	69 f7       	brne	.-38     	; 0x20c <__udivmodsi4_loop>
 232:	60 95       	com	r22
 234:	70 95       	com	r23
 236:	80 95       	com	r24
 238:	90 95       	com	r25
 23a:	9b 01       	movw	r18, r22
 23c:	ac 01       	movw	r20, r24
 23e:	bd 01       	movw	r22, r26
 240:	cf 01       	movw	r24, r30
 242:	08 95       	ret

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
