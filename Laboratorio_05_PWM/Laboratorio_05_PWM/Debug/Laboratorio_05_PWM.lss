
Laboratorio_05_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000722  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000796  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c63  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092c  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000658  00000000  00000000  00001e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  000024b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000543  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  00002b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  88:	0c 94 8f 03 	jmp	0x71e	; 0x71e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
 */ 
#include "adc.h"
#include <avr/io.h>

void ADC_Init() {
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC, prescaler 128
  90:	87 e8       	ldi	r24, 0x87	; 135
  92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  96:	08 95       	ret

00000098 <ADC_SelectChannel>:
}

void ADC_SelectChannel(uint8_t channel) {
	ADMUX = (1 << REFS0) | (channel & 0x07); // Referencia AVcc, seleccionar canal
  98:	87 70       	andi	r24, 0x07	; 7
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  a0:	08 95       	ret

000000a2 <ADC_Read>:
}

uint16_t ADC_Read() {
	ADCSRA |= (1 << ADSC); // Iniciar conversión
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperar
  ac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b0:	86 fd       	sbrc	r24, 6
  b2:	fc cf       	rjmp	.-8      	; 0xac <ADC_Read+0xa>
	return ADC;
  b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  bc:	08 95       	ret

000000be <LEDPWM_Init>:
 */ 
#include "led_pwm.h"
#include <avr/io.h>

void LEDPWM_Init() {
	DDRB |= (1 << DDB3); // PB3 como salida
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	84 b9       	out	0x04, r24	; 4
	
	// Timer2 en modo Fast PWM, prescaler 64 (frecuencia = 16MHz / 64 / 256 ? 976.56Hz)
	TCCR2A = (1 << COM2A1) | (1 << WGM21) | (1 << WGM20); // Modo 7 (Fast PWM)
  c4:	83 e8       	ldi	r24, 0x83	; 131
  c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22); // Prescaler 64
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	OCR2A = 0; // Inicialmente apagado
  d0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  d4:	08 95       	ret

000000d6 <LEDPWM_SetDuty>:
}

void LEDPWM_SetDuty(uint8_t duty) {
	OCR2A = duty; // Duty cycle de 0 a 255
  d6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  da:	08 95       	ret

000000dc <applyLowPassFilter>:
/****************************************/
// Function prototypes

/****************************************/
// Main Function
uint16_t applyLowPassFilter(uint16_t new_sample) {
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
	smoothed_adc = (uint16_t)(ALPHA * new_sample + (1 - ALPHA) * smoothed_adc);
  e4:	bc 01       	movw	r22, r24
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 11 02 	call	0x422	; 0x422 <__floatunsisf>
  ee:	2d ec       	ldi	r18, 0xCD	; 205
  f0:	3c ec       	ldi	r19, 0xCC	; 204
  f2:	4c e4       	ldi	r20, 0x4C	; 76
  f4:	5e e3       	ldi	r21, 0x3E	; 62
  f6:	0e 94 9f 02 	call	0x53e	; 0x53e <__mulsf3>
  fa:	6b 01       	movw	r12, r22
  fc:	7c 01       	movw	r14, r24
  fe:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 11 02 	call	0x422	; 0x422 <__floatunsisf>
 10e:	2d ec       	ldi	r18, 0xCD	; 205
 110:	3c ec       	ldi	r19, 0xCC	; 204
 112:	4c e4       	ldi	r20, 0x4C	; 76
 114:	5f e3       	ldi	r21, 0x3F	; 63
 116:	0e 94 9f 02 	call	0x53e	; 0x53e <__mulsf3>
 11a:	9b 01       	movw	r18, r22
 11c:	ac 01       	movw	r20, r24
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	0e 94 76 01 	call	0x2ec	; 0x2ec <__addsf3>
 126:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__fixunssfsi>
 12a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
	return smoothed_adc;
}
 132:	cb 01       	movw	r24, r22
 134:	ff 90       	pop	r15
 136:	ef 90       	pop	r14
 138:	df 90       	pop	r13
 13a:	cf 90       	pop	r12
 13c:	08 95       	ret

0000013e <readFilteredADC>:

uint16_t readFilteredADC(uint8_t channel) {
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	cf 93       	push	r28
 152:	b8 2e       	mov	r11, r24
	uint32_t sum = 0;
	for (uint8_t i = 0; i < FILTER_SAMPLES; i++) {
 154:	c0 e0       	ldi	r28, 0x00	; 0
	smoothed_adc = (uint16_t)(ALPHA * new_sample + (1 - ALPHA) * smoothed_adc);
	return smoothed_adc;
}

uint16_t readFilteredADC(uint8_t channel) {
	uint32_t sum = 0;
 156:	c1 2c       	mov	r12, r1
 158:	d1 2c       	mov	r13, r1
 15a:	76 01       	movw	r14, r12
	for (uint8_t i = 0; i < FILTER_SAMPLES; i++) {
 15c:	10 c0       	rjmp	.+32     	; 0x17e <readFilteredADC+0x40>
		ADC_SelectChannel(channel);
 15e:	8b 2d       	mov	r24, r11
 160:	0e 94 4c 00 	call	0x98	; 0x98 <ADC_SelectChannel>
		sum += ADC_Read();
 164:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_Read>
 168:	c8 0e       	add	r12, r24
 16a:	d9 1e       	adc	r13, r25
 16c:	e1 1c       	adc	r14, r1
 16e:	f1 1c       	adc	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	87 ec       	ldi	r24, 0xC7	; 199
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <readFilteredADC+0x36>
 178:	00 c0       	rjmp	.+0      	; 0x17a <readFilteredADC+0x3c>
 17a:	00 00       	nop
	return smoothed_adc;
}

uint16_t readFilteredADC(uint8_t channel) {
	uint32_t sum = 0;
	for (uint8_t i = 0; i < FILTER_SAMPLES; i++) {
 17c:	cf 5f       	subi	r28, 0xFF	; 255
 17e:	c5 30       	cpi	r28, 0x05	; 5
 180:	70 f3       	brcs	.-36     	; 0x15e <readFilteredADC+0x20>
		ADC_SelectChannel(channel);
		sum += ADC_Read();
		_delay_us(50);
	}
	return sum / FILTER_SAMPLES;
 182:	c7 01       	movw	r24, r14
 184:	b6 01       	movw	r22, r12
 186:	2d ec       	ldi	r18, 0xCD	; 205
 188:	3c ec       	ldi	r19, 0xCC	; 204
 18a:	4c ec       	ldi	r20, 0xCC	; 204
 18c:	5c ec       	ldi	r21, 0xCC	; 204
 18e:	0e 94 3d 03 	call	0x67a	; 0x67a <__umulsidi3>
 192:	00 e2       	ldi	r16, 0x20	; 32
 194:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__lshrdi3>
 198:	82 2e       	mov	r8, r18
 19a:	93 2e       	mov	r9, r19
 19c:	a4 2e       	mov	r10, r20
 19e:	b5 2e       	mov	r11, r21
 1a0:	d5 01       	movw	r26, r10
 1a2:	c4 01       	movw	r24, r8
 1a4:	b6 95       	lsr	r27
 1a6:	a7 95       	ror	r26
 1a8:	97 95       	ror	r25
 1aa:	87 95       	ror	r24
 1ac:	b6 95       	lsr	r27
 1ae:	a7 95       	ror	r26
 1b0:	97 95       	ror	r25
 1b2:	87 95       	ror	r24
}
 1b4:	cf 91       	pop	r28
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	df 90       	pop	r13
 1be:	cf 90       	pop	r12
 1c0:	bf 90       	pop	r11
 1c2:	af 90       	pop	r10
 1c4:	9f 90       	pop	r9
 1c6:	8f 90       	pop	r8
 1c8:	08 95       	ret

000001ca <mapADCtoPWM>:

uint8_t mapADCtoPWM(uint16_t adc_val) {
	return (uint8_t)(((uint32_t)adc_val * 255 + 511) / 1023); // +511 para redondear
 1ca:	9c 01       	movw	r18, r24
 1cc:	af ef       	ldi	r26, 0xFF	; 255
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	0e 94 2e 03 	call	0x65c	; 0x65c <__umulhisi3>
 1d4:	61 50       	subi	r22, 0x01	; 1
 1d6:	7e 4f       	sbci	r23, 0xFE	; 254
 1d8:	8f 4f       	sbci	r24, 0xFF	; 255
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	33 e0       	ldi	r19, 0x03	; 3
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	0e 94 0c 03 	call	0x618	; 0x618 <__udivmodsi4>
 1e8:	82 2f       	mov	r24, r18
}
 1ea:	08 95       	ret

000001ec <main>:


int main() {
	ADC_Init();
 1ec:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	PWM_Init();
 1f0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <PWM_Init>
	LEDPWM_Init();
 1f4:	0e 94 5f 00 	call	0xbe	; 0xbe <LEDPWM_Init>

	uint8_t last_led_duty = 0;
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t smoothed_adc = 0;

	while(1) {
		// Lectura del potenciómetro del LED (PC3)
		uint16_t raw_adc = readFilteredADC(3);
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 9f 00 	call	0x13e	; 0x13e <readFilteredADC>
		smoothed_adc = applyLowPassFilter(raw_adc); // Filtro pasa bajos
 200:	0e 94 6e 00 	call	0xdc	; 0xdc <applyLowPassFilter>
		
		uint8_t new_duty = mapADCtoPWM(smoothed_adc);
 204:	0e 94 e5 00 	call	0x1ca	; 0x1ca <mapADCtoPWM>
 208:	c8 2f       	mov	r28, r24
		
		// Histéresis para evitar fluctuaciones
		if (abs(new_duty - last_led_duty) > HYSTERESIS_THRESHOLD || new_duty == 0 || new_duty == 255) {
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	8d 1b       	sub	r24, r29
 20e:	91 09       	sbc	r25, r1
 210:	9c 01       	movw	r18, r24
 212:	22 f4       	brpl	.+8      	; 0x21c <main+0x30>
 214:	22 27       	eor	r18, r18
 216:	33 27       	eor	r19, r19
 218:	28 1b       	sub	r18, r24
 21a:	39 0b       	sbc	r19, r25
 21c:	23 30       	cpi	r18, 0x03	; 3
 21e:	31 05       	cpc	r19, r1
 220:	24 f4       	brge	.+8      	; 0x22a <main+0x3e>
 222:	cc 23       	and	r28, r28
 224:	11 f0       	breq	.+4      	; 0x22a <main+0x3e>
 226:	cf 3f       	cpi	r28, 0xFF	; 255
 228:	21 f4       	brne	.+8      	; 0x232 <main+0x46>
			LEDPWM_SetDuty(new_duty);
 22a:	8c 2f       	mov	r24, r28
 22c:	0e 94 6b 00 	call	0xd6	; 0xd6 <LEDPWM_SetDuty>
			last_led_duty = new_duty;
 230:	dc 2f       	mov	r29, r28
		}

		// Control de servos (sin cambios)
		ADC_SelectChannel(5);
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	0e 94 4c 00 	call	0x98	; 0x98 <ADC_SelectChannel>
		uint16_t adc_servo1 = ADC_Read();
 238:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_Read>
		uint16_t duty_servo1 = ((uint32_t)adc_servo1 * 250) / 1023 + 250;
 23c:	9c 01       	movw	r18, r24
 23e:	aa ef       	ldi	r26, 0xFA	; 250
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	0e 94 2e 03 	call	0x65c	; 0x65c <__umulhisi3>
 246:	0f 2e       	mov	r0, r31
 248:	cc 24       	eor	r12, r12
 24a:	ca 94       	dec	r12
 24c:	f3 e0       	ldi	r31, 0x03	; 3
 24e:	df 2e       	mov	r13, r31
 250:	e1 2c       	mov	r14, r1
 252:	f1 2c       	mov	r15, r1
 254:	f0 2d       	mov	r31, r0
 256:	a7 01       	movw	r20, r14
 258:	96 01       	movw	r18, r12
 25a:	0e 94 0c 03 	call	0x618	; 0x618 <__udivmodsi4>
		PWM_SetDutyCycleA(duty_servo1);
 25e:	c9 01       	movw	r24, r18
 260:	86 50       	subi	r24, 0x06	; 6
 262:	9f 4f       	sbci	r25, 0xFF	; 255
 264:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <PWM_SetDutyCycleA>

		ADC_SelectChannel(4);
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	0e 94 4c 00 	call	0x98	; 0x98 <ADC_SelectChannel>
		uint16_t adc_servo2 = ADC_Read();
 26e:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_Read>
		uint16_t duty_servo2 = ((uint32_t)adc_servo2 * 250) / 1023 + 250;
 272:	9c 01       	movw	r18, r24
 274:	aa ef       	ldi	r26, 0xFA	; 250
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	0e 94 2e 03 	call	0x65c	; 0x65c <__umulhisi3>
 27c:	a7 01       	movw	r20, r14
 27e:	96 01       	movw	r18, r12
 280:	0e 94 0c 03 	call	0x618	; 0x618 <__udivmodsi4>
		PWM_SetDutyCycleB(duty_servo2);
 284:	c9 01       	movw	r24, r18
 286:	86 50       	subi	r24, 0x06	; 6
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <PWM_SetDutyCycleB>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	80 e7       	ldi	r24, 0x70	; 112
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0xa8>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0xb2>
 29e:	00 00       	nop
 2a0:	ac cf       	rjmp	.-168    	; 0x1fa <main+0xe>

000002a2 <PWM_Init>:
 *  Author: André
 */ 
#include "pwm_servo.h"

void PWM_Init() {
	DDRB |= (1 << DDB1) | (1 << DDB2); // PB1 y PB2 como salidas
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	86 60       	ori	r24, 0x06	; 6
 2a6:	84 b9       	out	0x04, r24	; 4

	// Modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // No inversor en ambos canales
 2a8:	82 ea       	ldi	r24, 0xA2	; 162
 2aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10); // Prescaler 64
 2ae:	8b e1       	ldi	r24, 0x1B	; 27
 2b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 4999; // Periodo de 20ms (50Hz)
 2b4:	87 e8       	ldi	r24, 0x87	; 135
 2b6:	93 e1       	ldi	r25, 0x13	; 19
 2b8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 250; // Pulso inicial de 1ms (Servo 1)
 2c0:	8a ef       	ldi	r24, 0xFA	; 250
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 250; // Pulso inicial de 1ms (Servo 2)
 2cc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2d0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2d4:	08 95       	ret

000002d6 <PWM_SetDutyCycleA>:
}

void PWM_SetDutyCycleA(uint16_t duty) {
	OCR1A = duty;
 2d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2de:	08 95       	ret

000002e0 <PWM_SetDutyCycleB>:
}

void PWM_SetDutyCycleB(uint16_t duty) {
	OCR1B = duty;
 2e0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2e4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2e8:	08 95       	ret

000002ea <__subsf3>:
 2ea:	50 58       	subi	r21, 0x80	; 128

000002ec <__addsf3>:
 2ec:	bb 27       	eor	r27, r27
 2ee:	aa 27       	eor	r26, r26
 2f0:	0e 94 8d 01 	call	0x31a	; 0x31a <__addsf3x>
 2f4:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__fp_round>
 2f8:	0e 94 57 02 	call	0x4ae	; 0x4ae <__fp_pscA>
 2fc:	38 f0       	brcs	.+14     	; 0x30c <__addsf3+0x20>
 2fe:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__fp_pscB>
 302:	20 f0       	brcs	.+8      	; 0x30c <__addsf3+0x20>
 304:	39 f4       	brne	.+14     	; 0x314 <__addsf3+0x28>
 306:	9f 3f       	cpi	r25, 0xFF	; 255
 308:	19 f4       	brne	.+6      	; 0x310 <__addsf3+0x24>
 30a:	26 f4       	brtc	.+8      	; 0x314 <__addsf3+0x28>
 30c:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_nan>
 310:	0e f4       	brtc	.+2      	; 0x314 <__addsf3+0x28>
 312:	e0 95       	com	r30
 314:	e7 fb       	bst	r30, 7
 316:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_inf>

0000031a <__addsf3x>:
 31a:	e9 2f       	mov	r30, r25
 31c:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_split3>
 320:	58 f3       	brcs	.-42     	; 0x2f8 <__addsf3+0xc>
 322:	ba 17       	cp	r27, r26
 324:	62 07       	cpc	r22, r18
 326:	73 07       	cpc	r23, r19
 328:	84 07       	cpc	r24, r20
 32a:	95 07       	cpc	r25, r21
 32c:	20 f0       	brcs	.+8      	; 0x336 <__addsf3x+0x1c>
 32e:	79 f4       	brne	.+30     	; 0x34e <__addsf3x+0x34>
 330:	a6 f5       	brtc	.+104    	; 0x39a <__addsf3x+0x80>
 332:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_zero>
 336:	0e f4       	brtc	.+2      	; 0x33a <__addsf3x+0x20>
 338:	e0 95       	com	r30
 33a:	0b 2e       	mov	r0, r27
 33c:	ba 2f       	mov	r27, r26
 33e:	a0 2d       	mov	r26, r0
 340:	0b 01       	movw	r0, r22
 342:	b9 01       	movw	r22, r18
 344:	90 01       	movw	r18, r0
 346:	0c 01       	movw	r0, r24
 348:	ca 01       	movw	r24, r20
 34a:	a0 01       	movw	r20, r0
 34c:	11 24       	eor	r1, r1
 34e:	ff 27       	eor	r31, r31
 350:	59 1b       	sub	r21, r25
 352:	99 f0       	breq	.+38     	; 0x37a <__addsf3x+0x60>
 354:	59 3f       	cpi	r21, 0xF9	; 249
 356:	50 f4       	brcc	.+20     	; 0x36c <__addsf3x+0x52>
 358:	50 3e       	cpi	r21, 0xE0	; 224
 35a:	68 f1       	brcs	.+90     	; 0x3b6 <__addsf3x+0x9c>
 35c:	1a 16       	cp	r1, r26
 35e:	f0 40       	sbci	r31, 0x00	; 0
 360:	a2 2f       	mov	r26, r18
 362:	23 2f       	mov	r18, r19
 364:	34 2f       	mov	r19, r20
 366:	44 27       	eor	r20, r20
 368:	58 5f       	subi	r21, 0xF8	; 248
 36a:	f3 cf       	rjmp	.-26     	; 0x352 <__addsf3x+0x38>
 36c:	46 95       	lsr	r20
 36e:	37 95       	ror	r19
 370:	27 95       	ror	r18
 372:	a7 95       	ror	r26
 374:	f0 40       	sbci	r31, 0x00	; 0
 376:	53 95       	inc	r21
 378:	c9 f7       	brne	.-14     	; 0x36c <__addsf3x+0x52>
 37a:	7e f4       	brtc	.+30     	; 0x39a <__addsf3x+0x80>
 37c:	1f 16       	cp	r1, r31
 37e:	ba 0b       	sbc	r27, r26
 380:	62 0b       	sbc	r22, r18
 382:	73 0b       	sbc	r23, r19
 384:	84 0b       	sbc	r24, r20
 386:	ba f0       	brmi	.+46     	; 0x3b6 <__addsf3x+0x9c>
 388:	91 50       	subi	r25, 0x01	; 1
 38a:	a1 f0       	breq	.+40     	; 0x3b4 <__addsf3x+0x9a>
 38c:	ff 0f       	add	r31, r31
 38e:	bb 1f       	adc	r27, r27
 390:	66 1f       	adc	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	88 1f       	adc	r24, r24
 396:	c2 f7       	brpl	.-16     	; 0x388 <__addsf3x+0x6e>
 398:	0e c0       	rjmp	.+28     	; 0x3b6 <__addsf3x+0x9c>
 39a:	ba 0f       	add	r27, r26
 39c:	62 1f       	adc	r22, r18
 39e:	73 1f       	adc	r23, r19
 3a0:	84 1f       	adc	r24, r20
 3a2:	48 f4       	brcc	.+18     	; 0x3b6 <__addsf3x+0x9c>
 3a4:	87 95       	ror	r24
 3a6:	77 95       	ror	r23
 3a8:	67 95       	ror	r22
 3aa:	b7 95       	ror	r27
 3ac:	f7 95       	ror	r31
 3ae:	9e 3f       	cpi	r25, 0xFE	; 254
 3b0:	08 f0       	brcs	.+2      	; 0x3b4 <__addsf3x+0x9a>
 3b2:	b0 cf       	rjmp	.-160    	; 0x314 <__addsf3+0x28>
 3b4:	93 95       	inc	r25
 3b6:	88 0f       	add	r24, r24
 3b8:	08 f0       	brcs	.+2      	; 0x3bc <__addsf3x+0xa2>
 3ba:	99 27       	eor	r25, r25
 3bc:	ee 0f       	add	r30, r30
 3be:	97 95       	ror	r25
 3c0:	87 95       	ror	r24
 3c2:	08 95       	ret

000003c4 <__fixunssfsi>:
 3c4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__fp_splitA>
 3c8:	88 f0       	brcs	.+34     	; 0x3ec <__fixunssfsi+0x28>
 3ca:	9f 57       	subi	r25, 0x7F	; 127
 3cc:	98 f0       	brcs	.+38     	; 0x3f4 <__fixunssfsi+0x30>
 3ce:	b9 2f       	mov	r27, r25
 3d0:	99 27       	eor	r25, r25
 3d2:	b7 51       	subi	r27, 0x17	; 23
 3d4:	b0 f0       	brcs	.+44     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3d6:	e1 f0       	breq	.+56     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	1a f0       	brmi	.+6      	; 0x3e8 <__fixunssfsi+0x24>
 3e2:	ba 95       	dec	r27
 3e4:	c9 f7       	brne	.-14     	; 0x3d8 <__fixunssfsi+0x14>
 3e6:	14 c0       	rjmp	.+40     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3e8:	b1 30       	cpi	r27, 0x01	; 1
 3ea:	91 f0       	breq	.+36     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ec:	0e 94 98 02 	call	0x530	; 0x530 <__fp_zero>
 3f0:	b1 e0       	ldi	r27, 0x01	; 1
 3f2:	08 95       	ret
 3f4:	0c 94 98 02 	jmp	0x530	; 0x530 <__fp_zero>
 3f8:	67 2f       	mov	r22, r23
 3fa:	78 2f       	mov	r23, r24
 3fc:	88 27       	eor	r24, r24
 3fe:	b8 5f       	subi	r27, 0xF8	; 248
 400:	39 f0       	breq	.+14     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 402:	b9 3f       	cpi	r27, 0xF9	; 249
 404:	cc f3       	brlt	.-14     	; 0x3f8 <__fixunssfsi+0x34>
 406:	86 95       	lsr	r24
 408:	77 95       	ror	r23
 40a:	67 95       	ror	r22
 40c:	b3 95       	inc	r27
 40e:	d9 f7       	brne	.-10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 410:	3e f4       	brtc	.+14     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 412:	90 95       	com	r25
 414:	80 95       	com	r24
 416:	70 95       	com	r23
 418:	61 95       	neg	r22
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8f 4f       	sbci	r24, 0xFF	; 255
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	08 95       	ret

00000422 <__floatunsisf>:
 422:	e8 94       	clt
 424:	09 c0       	rjmp	.+18     	; 0x438 <__floatsisf+0x12>

00000426 <__floatsisf>:
 426:	97 fb       	bst	r25, 7
 428:	3e f4       	brtc	.+14     	; 0x438 <__floatsisf+0x12>
 42a:	90 95       	com	r25
 42c:	80 95       	com	r24
 42e:	70 95       	com	r23
 430:	61 95       	neg	r22
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	99 23       	and	r25, r25
 43a:	a9 f0       	breq	.+42     	; 0x466 <__floatsisf+0x40>
 43c:	f9 2f       	mov	r31, r25
 43e:	96 e9       	ldi	r25, 0x96	; 150
 440:	bb 27       	eor	r27, r27
 442:	93 95       	inc	r25
 444:	f6 95       	lsr	r31
 446:	87 95       	ror	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f1 11       	cpse	r31, r1
 450:	f8 cf       	rjmp	.-16     	; 0x442 <__floatsisf+0x1c>
 452:	fa f4       	brpl	.+62     	; 0x492 <__floatsisf+0x6c>
 454:	bb 0f       	add	r27, r27
 456:	11 f4       	brne	.+4      	; 0x45c <__floatsisf+0x36>
 458:	60 ff       	sbrs	r22, 0
 45a:	1b c0       	rjmp	.+54     	; 0x492 <__floatsisf+0x6c>
 45c:	6f 5f       	subi	r22, 0xFF	; 255
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	16 c0       	rjmp	.+44     	; 0x492 <__floatsisf+0x6c>
 466:	88 23       	and	r24, r24
 468:	11 f0       	breq	.+4      	; 0x46e <__floatsisf+0x48>
 46a:	96 e9       	ldi	r25, 0x96	; 150
 46c:	11 c0       	rjmp	.+34     	; 0x490 <__floatsisf+0x6a>
 46e:	77 23       	and	r23, r23
 470:	21 f0       	breq	.+8      	; 0x47a <__floatsisf+0x54>
 472:	9e e8       	ldi	r25, 0x8E	; 142
 474:	87 2f       	mov	r24, r23
 476:	76 2f       	mov	r23, r22
 478:	05 c0       	rjmp	.+10     	; 0x484 <__floatsisf+0x5e>
 47a:	66 23       	and	r22, r22
 47c:	71 f0       	breq	.+28     	; 0x49a <__floatsisf+0x74>
 47e:	96 e8       	ldi	r25, 0x86	; 134
 480:	86 2f       	mov	r24, r22
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	2a f0       	brmi	.+10     	; 0x492 <__floatsisf+0x6c>
 488:	9a 95       	dec	r25
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	88 1f       	adc	r24, r24
 490:	da f7       	brpl	.-10     	; 0x488 <__floatsisf+0x62>
 492:	88 0f       	add	r24, r24
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	97 f9       	bld	r25, 7
 49a:	08 95       	ret

0000049c <__fp_inf>:
 49c:	97 f9       	bld	r25, 7
 49e:	9f 67       	ori	r25, 0x7F	; 127
 4a0:	80 e8       	ldi	r24, 0x80	; 128
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	08 95       	ret

000004a8 <__fp_nan>:
 4a8:	9f ef       	ldi	r25, 0xFF	; 255
 4aa:	80 ec       	ldi	r24, 0xC0	; 192
 4ac:	08 95       	ret

000004ae <__fp_pscA>:
 4ae:	00 24       	eor	r0, r0
 4b0:	0a 94       	dec	r0
 4b2:	16 16       	cp	r1, r22
 4b4:	17 06       	cpc	r1, r23
 4b6:	18 06       	cpc	r1, r24
 4b8:	09 06       	cpc	r0, r25
 4ba:	08 95       	ret

000004bc <__fp_pscB>:
 4bc:	00 24       	eor	r0, r0
 4be:	0a 94       	dec	r0
 4c0:	12 16       	cp	r1, r18
 4c2:	13 06       	cpc	r1, r19
 4c4:	14 06       	cpc	r1, r20
 4c6:	05 06       	cpc	r0, r21
 4c8:	08 95       	ret

000004ca <__fp_round>:
 4ca:	09 2e       	mov	r0, r25
 4cc:	03 94       	inc	r0
 4ce:	00 0c       	add	r0, r0
 4d0:	11 f4       	brne	.+4      	; 0x4d6 <__fp_round+0xc>
 4d2:	88 23       	and	r24, r24
 4d4:	52 f0       	brmi	.+20     	; 0x4ea <__fp_round+0x20>
 4d6:	bb 0f       	add	r27, r27
 4d8:	40 f4       	brcc	.+16     	; 0x4ea <__fp_round+0x20>
 4da:	bf 2b       	or	r27, r31
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__fp_round+0x18>
 4de:	60 ff       	sbrs	r22, 0
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <__fp_round+0x20>
 4e2:	6f 5f       	subi	r22, 0xFF	; 255
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	8f 4f       	sbci	r24, 0xFF	; 255
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	08 95       	ret

000004ec <__fp_split3>:
 4ec:	57 fd       	sbrc	r21, 7
 4ee:	90 58       	subi	r25, 0x80	; 128
 4f0:	44 0f       	add	r20, r20
 4f2:	55 1f       	adc	r21, r21
 4f4:	59 f0       	breq	.+22     	; 0x50c <__fp_splitA+0x10>
 4f6:	5f 3f       	cpi	r21, 0xFF	; 255
 4f8:	71 f0       	breq	.+28     	; 0x516 <__fp_splitA+0x1a>
 4fa:	47 95       	ror	r20

000004fc <__fp_splitA>:
 4fc:	88 0f       	add	r24, r24
 4fe:	97 fb       	bst	r25, 7
 500:	99 1f       	adc	r25, r25
 502:	61 f0       	breq	.+24     	; 0x51c <__fp_splitA+0x20>
 504:	9f 3f       	cpi	r25, 0xFF	; 255
 506:	79 f0       	breq	.+30     	; 0x526 <__fp_splitA+0x2a>
 508:	87 95       	ror	r24
 50a:	08 95       	ret
 50c:	12 16       	cp	r1, r18
 50e:	13 06       	cpc	r1, r19
 510:	14 06       	cpc	r1, r20
 512:	55 1f       	adc	r21, r21
 514:	f2 cf       	rjmp	.-28     	; 0x4fa <__fp_split3+0xe>
 516:	46 95       	lsr	r20
 518:	f1 df       	rcall	.-30     	; 0x4fc <__fp_splitA>
 51a:	08 c0       	rjmp	.+16     	; 0x52c <__fp_splitA+0x30>
 51c:	16 16       	cp	r1, r22
 51e:	17 06       	cpc	r1, r23
 520:	18 06       	cpc	r1, r24
 522:	99 1f       	adc	r25, r25
 524:	f1 cf       	rjmp	.-30     	; 0x508 <__fp_splitA+0xc>
 526:	86 95       	lsr	r24
 528:	71 05       	cpc	r23, r1
 52a:	61 05       	cpc	r22, r1
 52c:	08 94       	sec
 52e:	08 95       	ret

00000530 <__fp_zero>:
 530:	e8 94       	clt

00000532 <__fp_szero>:
 532:	bb 27       	eor	r27, r27
 534:	66 27       	eor	r22, r22
 536:	77 27       	eor	r23, r23
 538:	cb 01       	movw	r24, r22
 53a:	97 f9       	bld	r25, 7
 53c:	08 95       	ret

0000053e <__mulsf3>:
 53e:	0e 94 b2 02 	call	0x564	; 0x564 <__mulsf3x>
 542:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__fp_round>
 546:	0e 94 57 02 	call	0x4ae	; 0x4ae <__fp_pscA>
 54a:	38 f0       	brcs	.+14     	; 0x55a <__mulsf3+0x1c>
 54c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__fp_pscB>
 550:	20 f0       	brcs	.+8      	; 0x55a <__mulsf3+0x1c>
 552:	95 23       	and	r25, r21
 554:	11 f0       	breq	.+4      	; 0x55a <__mulsf3+0x1c>
 556:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_inf>
 55a:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__fp_nan>
 55e:	11 24       	eor	r1, r1
 560:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_szero>

00000564 <__mulsf3x>:
 564:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_split3>
 568:	70 f3       	brcs	.-36     	; 0x546 <__mulsf3+0x8>

0000056a <__mulsf3_pse>:
 56a:	95 9f       	mul	r25, r21
 56c:	c1 f3       	breq	.-16     	; 0x55e <__mulsf3+0x20>
 56e:	95 0f       	add	r25, r21
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	55 1f       	adc	r21, r21
 574:	62 9f       	mul	r22, r18
 576:	f0 01       	movw	r30, r0
 578:	72 9f       	mul	r23, r18
 57a:	bb 27       	eor	r27, r27
 57c:	f0 0d       	add	r31, r0
 57e:	b1 1d       	adc	r27, r1
 580:	63 9f       	mul	r22, r19
 582:	aa 27       	eor	r26, r26
 584:	f0 0d       	add	r31, r0
 586:	b1 1d       	adc	r27, r1
 588:	aa 1f       	adc	r26, r26
 58a:	64 9f       	mul	r22, r20
 58c:	66 27       	eor	r22, r22
 58e:	b0 0d       	add	r27, r0
 590:	a1 1d       	adc	r26, r1
 592:	66 1f       	adc	r22, r22
 594:	82 9f       	mul	r24, r18
 596:	22 27       	eor	r18, r18
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	62 1f       	adc	r22, r18
 59e:	73 9f       	mul	r23, r19
 5a0:	b0 0d       	add	r27, r0
 5a2:	a1 1d       	adc	r26, r1
 5a4:	62 1f       	adc	r22, r18
 5a6:	83 9f       	mul	r24, r19
 5a8:	a0 0d       	add	r26, r0
 5aa:	61 1d       	adc	r22, r1
 5ac:	22 1f       	adc	r18, r18
 5ae:	74 9f       	mul	r23, r20
 5b0:	33 27       	eor	r19, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	23 1f       	adc	r18, r19
 5b8:	84 9f       	mul	r24, r20
 5ba:	60 0d       	add	r22, r0
 5bc:	21 1d       	adc	r18, r1
 5be:	82 2f       	mov	r24, r18
 5c0:	76 2f       	mov	r23, r22
 5c2:	6a 2f       	mov	r22, r26
 5c4:	11 24       	eor	r1, r1
 5c6:	9f 57       	subi	r25, 0x7F	; 127
 5c8:	50 40       	sbci	r21, 0x00	; 0
 5ca:	9a f0       	brmi	.+38     	; 0x5f2 <__mulsf3_pse+0x88>
 5cc:	f1 f0       	breq	.+60     	; 0x60a <__mulsf3_pse+0xa0>
 5ce:	88 23       	and	r24, r24
 5d0:	4a f0       	brmi	.+18     	; 0x5e4 <__mulsf3_pse+0x7a>
 5d2:	ee 0f       	add	r30, r30
 5d4:	ff 1f       	adc	r31, r31
 5d6:	bb 1f       	adc	r27, r27
 5d8:	66 1f       	adc	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	50 40       	sbci	r21, 0x00	; 0
 5e2:	a9 f7       	brne	.-22     	; 0x5ce <__mulsf3_pse+0x64>
 5e4:	9e 3f       	cpi	r25, 0xFE	; 254
 5e6:	51 05       	cpc	r21, r1
 5e8:	80 f0       	brcs	.+32     	; 0x60a <__mulsf3_pse+0xa0>
 5ea:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__fp_inf>
 5ee:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_szero>
 5f2:	5f 3f       	cpi	r21, 0xFF	; 255
 5f4:	e4 f3       	brlt	.-8      	; 0x5ee <__mulsf3_pse+0x84>
 5f6:	98 3e       	cpi	r25, 0xE8	; 232
 5f8:	d4 f3       	brlt	.-12     	; 0x5ee <__mulsf3_pse+0x84>
 5fa:	86 95       	lsr	r24
 5fc:	77 95       	ror	r23
 5fe:	67 95       	ror	r22
 600:	b7 95       	ror	r27
 602:	f7 95       	ror	r31
 604:	e7 95       	ror	r30
 606:	9f 5f       	subi	r25, 0xFF	; 255
 608:	c1 f7       	brne	.-16     	; 0x5fa <__mulsf3_pse+0x90>
 60a:	fe 2b       	or	r31, r30
 60c:	88 0f       	add	r24, r24
 60e:	91 1d       	adc	r25, r1
 610:	96 95       	lsr	r25
 612:	87 95       	ror	r24
 614:	97 f9       	bld	r25, 7
 616:	08 95       	ret

00000618 <__udivmodsi4>:
 618:	a1 e2       	ldi	r26, 0x21	; 33
 61a:	1a 2e       	mov	r1, r26
 61c:	aa 1b       	sub	r26, r26
 61e:	bb 1b       	sub	r27, r27
 620:	fd 01       	movw	r30, r26
 622:	0d c0       	rjmp	.+26     	; 0x63e <__udivmodsi4_ep>

00000624 <__udivmodsi4_loop>:
 624:	aa 1f       	adc	r26, r26
 626:	bb 1f       	adc	r27, r27
 628:	ee 1f       	adc	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	a2 17       	cp	r26, r18
 62e:	b3 07       	cpc	r27, r19
 630:	e4 07       	cpc	r30, r20
 632:	f5 07       	cpc	r31, r21
 634:	20 f0       	brcs	.+8      	; 0x63e <__udivmodsi4_ep>
 636:	a2 1b       	sub	r26, r18
 638:	b3 0b       	sbc	r27, r19
 63a:	e4 0b       	sbc	r30, r20
 63c:	f5 0b       	sbc	r31, r21

0000063e <__udivmodsi4_ep>:
 63e:	66 1f       	adc	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	1a 94       	dec	r1
 648:	69 f7       	brne	.-38     	; 0x624 <__udivmodsi4_loop>
 64a:	60 95       	com	r22
 64c:	70 95       	com	r23
 64e:	80 95       	com	r24
 650:	90 95       	com	r25
 652:	9b 01       	movw	r18, r22
 654:	ac 01       	movw	r20, r24
 656:	bd 01       	movw	r22, r26
 658:	cf 01       	movw	r24, r30
 65a:	08 95       	ret

0000065c <__umulhisi3>:
 65c:	a2 9f       	mul	r26, r18
 65e:	b0 01       	movw	r22, r0
 660:	b3 9f       	mul	r27, r19
 662:	c0 01       	movw	r24, r0
 664:	a3 9f       	mul	r26, r19
 666:	70 0d       	add	r23, r0
 668:	81 1d       	adc	r24, r1
 66a:	11 24       	eor	r1, r1
 66c:	91 1d       	adc	r25, r1
 66e:	b2 9f       	mul	r27, r18
 670:	70 0d       	add	r23, r0
 672:	81 1d       	adc	r24, r1
 674:	11 24       	eor	r1, r1
 676:	91 1d       	adc	r25, r1
 678:	08 95       	ret

0000067a <__umulsidi3>:
 67a:	e8 94       	clt

0000067c <__umulsidi3_helper>:
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	fc 01       	movw	r30, r24
 682:	db 01       	movw	r26, r22
 684:	0e 94 2e 03 	call	0x65c	; 0x65c <__umulhisi3>
 688:	7f 93       	push	r23
 68a:	6f 93       	push	r22
 68c:	e9 01       	movw	r28, r18
 68e:	9a 01       	movw	r18, r20
 690:	ac 01       	movw	r20, r24
 692:	bf 93       	push	r27
 694:	af 93       	push	r26
 696:	3f 93       	push	r19
 698:	2f 93       	push	r18
 69a:	df 01       	movw	r26, r30
 69c:	0e 94 2e 03 	call	0x65c	; 0x65c <__umulhisi3>
 6a0:	26 f4       	brtc	.+8      	; 0x6aa <__umulsidi3_helper+0x2e>
 6a2:	6c 1b       	sub	r22, r28
 6a4:	7d 0b       	sbc	r23, r29
 6a6:	82 0b       	sbc	r24, r18
 6a8:	93 0b       	sbc	r25, r19
 6aa:	9e 01       	movw	r18, r28
 6ac:	eb 01       	movw	r28, r22
 6ae:	fc 01       	movw	r30, r24
 6b0:	0e 94 86 03 	call	0x70c	; 0x70c <__muldi3_6>
 6b4:	af 91       	pop	r26
 6b6:	bf 91       	pop	r27
 6b8:	2f 91       	pop	r18
 6ba:	3f 91       	pop	r19
 6bc:	0e 94 86 03 	call	0x70c	; 0x70c <__muldi3_6>
 6c0:	be 01       	movw	r22, r28
 6c2:	cf 01       	movw	r24, r30
 6c4:	f9 01       	movw	r30, r18
 6c6:	2f 91       	pop	r18
 6c8:	3f 91       	pop	r19
 6ca:	cf 91       	pop	r28
 6cc:	df 91       	pop	r29
 6ce:	08 95       	ret

000006d0 <__ashrdi3>:
 6d0:	97 fb       	bst	r25, 7
 6d2:	10 f8       	bld	r1, 0

000006d4 <__lshrdi3>:
 6d4:	16 94       	lsr	r1
 6d6:	00 08       	sbc	r0, r0
 6d8:	0f 93       	push	r16
 6da:	08 30       	cpi	r16, 0x08	; 8
 6dc:	98 f0       	brcs	.+38     	; 0x704 <__lshrdi3+0x30>
 6de:	08 50       	subi	r16, 0x08	; 8
 6e0:	23 2f       	mov	r18, r19
 6e2:	34 2f       	mov	r19, r20
 6e4:	45 2f       	mov	r20, r21
 6e6:	56 2f       	mov	r21, r22
 6e8:	67 2f       	mov	r22, r23
 6ea:	78 2f       	mov	r23, r24
 6ec:	89 2f       	mov	r24, r25
 6ee:	90 2d       	mov	r25, r0
 6f0:	f4 cf       	rjmp	.-24     	; 0x6da <__lshrdi3+0x6>
 6f2:	05 94       	asr	r0
 6f4:	97 95       	ror	r25
 6f6:	87 95       	ror	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	57 95       	ror	r21
 6fe:	47 95       	ror	r20
 700:	37 95       	ror	r19
 702:	27 95       	ror	r18
 704:	0a 95       	dec	r16
 706:	aa f7       	brpl	.-22     	; 0x6f2 <__lshrdi3+0x1e>
 708:	0f 91       	pop	r16
 70a:	08 95       	ret

0000070c <__muldi3_6>:
 70c:	0e 94 2e 03 	call	0x65c	; 0x65c <__umulhisi3>
 710:	46 0f       	add	r20, r22
 712:	57 1f       	adc	r21, r23
 714:	c8 1f       	adc	r28, r24
 716:	d9 1f       	adc	r29, r25
 718:	08 f4       	brcc	.+2      	; 0x71c <__muldi3_6+0x10>
 71a:	31 96       	adiw	r30, 0x01	; 1
 71c:	08 95       	ret

0000071e <_exit>:
 71e:	f8 94       	cli

00000720 <__stop_program>:
 720:	ff cf       	rjmp	.-2      	; 0x720 <__stop_program>
